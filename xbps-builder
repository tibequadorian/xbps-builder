#!/bin/bash
#
# XBPS-builder

# source configuration
if [ ! -f conf ]; then
	echo "No configuration found." >/dev/stderr
	exit
fi
source ./conf

# get full path of privkey
if [ ! -z "$privkey" ]; then
	privkey=$(realpath "$privkey")
	if [ ! -f "$privkey" ]; then
		echo "Signing key doesn't exist, creating one..."
		openssl genrsa -out "$privkey" 4096
	fi
fi

# update distdir
cd "$distdir" || exit
update_distdir || exit

declare -A bootstrap_used
for arch in $archs; do
	bootstrap_used[${bootstrap[$arch]}]=1
done

# update masterdirs
for bootstrap_arch in "${!bootstrap_used[@]}"; do
	_masterdir=${masterdir[$bootstrap_arch]}
	if [ ! -d $_masterdir ]; then
		./xbps-src -m $_masterdir binary-bootstrap $bootstrap_arch
	else
		./xbps-src -m $_masterdir bootstrap-update
	fi
done

# add repositories
binpkgs="hostdir/binpkgs"
repos=(
	"$binpkgs"
	"$binpkgs/nonfree"
	"$binpkgs/multilib"
	"$binpkgs/multilib/nonfree"
	"$binpkgs/debug"
)

repos_opt=""
for repo in ${repos[@]}; do
	repos_opt+=" --repository=$repo"
done

# update packages
for arch in $archs; do
	bootstrap_arch=${bootstrap[$arch]}
	cross_opt=""
	if [[ "$arch" != "$bootstrap_arch" ]]; then
		cross_opt="-a $arch"
	fi
	for pkg in $(XBPS_TARGET_ARCH=$arch xbps-checkvers -f '%n' -i $repos_opt -m $packages); do
		./xbps-src -m "${masterdir[$bootstrap_arch]}" $opts pkg $pkg
	done
done

# sign repositories and packages
if [ ! -z "$privkey" ]; then
	for repo in ${repos[@]}; do
		if [ -d $repo ]; then
			xbps-rindex --sign --signedby "$signedby" --privkey "$privkey" $repo
			xbps-rindex --sign-pkg --privkey "$privkey" $repo/*.xbps
		fi
	done
else
	echo "Private key not set, skip signing repositories."
fi
